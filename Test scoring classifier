{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d17dcec2-d878-4fe5-abc9-28462526abe6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing relevant libraries \n",
    "\n",
    "import pandas as pd \n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.model_selection import train_test_split, KFold, cross_val_score\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.naive_bayes import MultinomialNB \n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.metrics import classification_report, confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "10ec60d9-80e9-4ea2-9dd7-0ce996b8622f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>EssaySet</th>\n",
       "      <th>Score1</th>\n",
       "      <th>Score2</th>\n",
       "      <th>EssayText</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Some additional information that we would need...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>After reading the expirement, I realized that ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>What you need is more trials, a control set up...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>The student should list what rock is better an...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>For the students to be able to make a replicat...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  EssaySet  Score1  Score2  \\\n",
       "0   1         1       1       1   \n",
       "1   2         1       1       1   \n",
       "2   3         1       1       1   \n",
       "3   4         1       0       0   \n",
       "4   5         1       2       2   \n",
       "\n",
       "                                           EssayText  \n",
       "0  Some additional information that we would need...  \n",
       "1  After reading the expirement, I realized that ...  \n",
       "2  What you need is more trials, a control set up...  \n",
       "3  The student should list what rock is better an...  \n",
       "4  For the students to be able to make a replicat...  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import and cleaning data \n",
    "\n",
    "grading_df = pd.read_csv(\"grading_train.tsv\", sep='\\t')\n",
    "grading_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "7dd59cff-9d5d-4ea4-919e-d965c703729c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#using bagofwords to convert data \n",
    "\n",
    "count_vect = CountVectorizer()\n",
    "X = count_vect.fit_transform(grading_df['EssayText'].values)\n",
    "y = grading_df['Score1'].values\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 35)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7049a247-3206-4ed0-bea6-168d19e59ecd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "models = {'KNN': KNeighborsClassifier(n_neighbors = 6), 'Random Forest': RandomForestClassifier(), 'Multinomial NB': MultinomialNB()}\n",
    "\n",
    "results = []\n",
    "for model in models.values():\n",
    "    kf = KFold(n_splits = 5, random_state = 35, shuffle = True)\n",
    "    cv_score = cross_val_score(model, X_train, y_train, cv = kf)\n",
    "    results.append(cv_score)\n",
    "    \n",
    "plt.boxplot(results, labels=models.keys())\n",
    "plt.show()\n",
    "\n",
    "#steps = [()]\n",
    "#pipeline = Pipeline(steps)\n",
    "#pipeline.fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b13f67b1-395f-47ae-a1b2-0b76a96c022e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN Test Accuracy: 0.590190609019061\n",
      "Classification report for KNN\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.61      0.86      0.72      1715\n",
      "           1       0.53      0.43      0.47      1354\n",
      "           2       0.63      0.43      0.51      1038\n",
      "           3       0.41      0.17      0.24       195\n",
      "\n",
      "    accuracy                           0.59      4302\n",
      "   macro avg       0.55      0.47      0.49      4302\n",
      "weighted avg       0.58      0.59      0.57      4302\n",
      "\n",
      "-----------------------------------------\n",
      "Random Forest Test Accuracy: 0.6671315667131567\n",
      "Classification report for Random Forest\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.73      0.81      0.77      1715\n",
      "           1       0.59      0.58      0.59      1354\n",
      "           2       0.62      0.62      0.62      1038\n",
      "           3       0.54      0.07      0.13       195\n",
      "\n",
      "    accuracy                           0.66      4302\n",
      "   macro avg       0.62      0.52      0.52      4302\n",
      "weighted avg       0.65      0.66      0.65      4302\n",
      "\n",
      "-----------------------------------------\n",
      "Multinomial NB Test Accuracy: 0.5541608554160855\n",
      "Classification report for Multinomial NB\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.74      0.61      0.67      1715\n",
      "           1       0.57      0.47      0.52      1354\n",
      "           2       0.48      0.51      0.49      1038\n",
      "           3       0.26      0.89      0.40       195\n",
      "\n",
      "    accuracy                           0.55      4302\n",
      "   macro avg       0.51      0.62      0.52      4302\n",
      "weighted avg       0.60      0.55      0.57      4302\n",
      "\n",
      "-----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "for name, model in models.items():\n",
    "    model.fit(X_train, y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    print(\"Classification report for {}\".format(name))\n",
    "    print(classification_report(y_test, y_pred))\n",
    "    print('-----------------------------------------')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6d67012b-4b43-4aa7-b59b-0b297e961adf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN Test Accuracy: 0.590190609019061\n",
      "Random Forest Test Accuracy: 0.6608554160855417\n",
      "Multinomial NB Test Accuracy: 0.5541608554160855\n"
     ]
    }
   ],
   "source": [
    "for name, model in models.items():\n",
    "    model.fit(X_train, y_train)\n",
    "    score = model.score(X_test, y_test)\n",
    "    print(\"{} Test Accuracy: {}\".format(name, score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "1e01ecb9-7a1e-4981-94a1-0d165fd96bd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#paramter tuning for Random forest\n",
    "train_accuracies = {}\n",
    "test_accuracies = {}\n",
    "n = np.arange(50, 120, 10)\n",
    "\n",
    "for estimator in n:\n",
    "    RFC = RandomForestClassifier(n_estimators = estimator)\n",
    "    RFC.fit(X_train, y_train)\n",
    "    train_accuracies[estimator] = RFC.score(X_train, y_train)\n",
    "    test_accuracies[estimator] = RFC.score(X_test, y_test)\n",
    "    \n",
    "plt.title(\"Random Forest: Varying numbers of trees of the forest\")\n",
    "plt.plot(n, train_accuracies.values(), label = 'Training accuracy')\n",
    "plt.plot(n, test_accuracies.values(), label = 'Testing accuracy')\n",
    "plt.legend()\n",
    "plt.xlabel(\"Number of Neighbors\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f50999c5-400a-45eb-9bc7-4454e66f8389",
   "metadata": {},
   "outputs": [],
   "source": [
    "RFC = RandomForestClassifier(n_estimators = 2000)\n",
    "RFC.fit(X_train, y_train)\n",
    "score = RFC.score(X_test, y_test)\n",
    "print(\"Random forest Test Accuracy after Parameter tuning: {}\".format(score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "07dad2ca-7384-46b9-8c81-ea23e2bb8c7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_accuracies = {}\n",
    "test_accuracies = {}\n",
    "neighbors = np.arange(1, 20)\n",
    "\n",
    "for n in neighbors:\n",
    "    KNN = KNeighborsClassifier(n_neighbors = n)\n",
    "    KNN.fit(X_train, y_train)\n",
    "    train_accuracies[n] = KNN.score(X_train, y_train)\n",
    "    test_accuracies[n] = KNN.score(X_test, y_test)\n",
    "    \n",
    "plt.title(\"KNN: Varying numbers of neighbors\")\n",
    "plt.plot(neighbors, train_accuracies.values(), label = 'Training accuracy')\n",
    "plt.plot(neighbors, test_accuracies.values(), label = 'Testing accuracy')\n",
    "plt.legend()\n",
    "plt.xlabel(\"Number of Neighbors\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ff4d2696-46d2-4106-8f06-7d94e85ab56b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KNN Test Accuracy after Parameter tuning: 0.599256159925616\n"
     ]
    }
   ],
   "source": [
    "KNN = KNeighborsClassifier(n_neighbors = 13)\n",
    "KNN.fit(X_train, y_train)\n",
    "score = KNN.score(X_test, y_test)\n",
    "print(\"KNN Test Accuracy after Parameter tuning: {}\".format(score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "31568c49-29fa-485e-a9ab-1ada75c41273",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
